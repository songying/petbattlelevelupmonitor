#!/usr/bin/env lua

-- Pet Battle Level Up Monitor - Data Parser
-- Parses tempdata.lua and generates corrected savedData.lua

print("Pet Battle Level Up Monitor - Data Parser")
print("==========================================")

-- Function to load tempdata.lua
local function loadTempData()
    local file = io.open("tempdata.lua", "r")
    if not file then
        print("ERROR: tempdata.lua not found in current directory")
        return nil
    end

    local content = file:read("*all")
    file:close()

    print("Successfully loaded tempdata.lua")

    -- Execute the Lua content to get the data structure
    local func, err = load(content)
    if not func then
        print("ERROR: Failed to parse tempdata.lua - " .. err)
        return nil
    end

    func()

    -- Return the global variable that should be set
    return PetBattleLevelUpData
end

-- Function to parse array-based level data using XP sorting
local function parseArrayData(levelData, currentLevel)
    if not levelData or type(levelData) ~= "table" then
        return {}
    end

    local arrayData = {}

    -- Collect array-based entries (numeric indices)
    for i = 1, 80 do
        if levelData[i] and type(levelData[i]) == "table" then
            local entry = levelData[i]
            if entry.xpGainPerBattle and entry.totalXpNeeded then
                table.insert(arrayData, {
                    index = i,
                    xpGainPerBattle = entry.xpGainPerBattle,
                    totalXpNeeded = entry.totalXpNeeded
                })
            end
        end
    end

    if #arrayData == 0 then
        print("No array-based data found")
        return {}
    end

    print("Found " .. #arrayData .. " data entries to parse")

    -- Sort by xpGainPerBattle in ascending order
    table.sort(arrayData, function(a, b)
        return a.xpGainPerBattle < b.xpGainPerBattle
    end)

    print("Sorted data by XP values:")
    for i, entry in ipairs(arrayData) do
        print("  " .. i .. ": XP=" .. entry.xpGainPerBattle .. ", Total=" .. entry.totalXpNeeded)
    end

    -- Map to correct levels: highest XP = current level, descending from there
    local fixedData = {}

    -- Start from the highest XP entry and work backwards
    for i = #arrayData, 1, -1 do
        local entry = arrayData[i]
        local assignedLevel = currentLevel - (#arrayData - i)

        if assignedLevel > 0 and assignedLevel <= 80 then
            fixedData[tostring(assignedLevel)] = {
                totalXpNeeded = entry.totalXpNeeded,
                xpGainPerBattle = entry.xpGainPerBattle
            }

            print("Mapped: Array index " .. entry.index .. " (XP:" .. entry.xpGainPerBattle .. ") -> Level " .. assignedLevel)
        end
    end

    return fixedData
end

-- Function to generate savedData.lua
local function generateSavedData(data, currentLevel)
    local file = io.open("savedData.lua", "w")
    if not file then
        print("ERROR: Cannot create savedData.lua")
        return false
    end

    -- Write header
    file:write("-- Pet Battle Level Up Monitor - Corrected Saved Data\n")
    file:write("-- Generated by parse_temp_data.lua\n")
    file:write("-- Current Level: " .. currentLevel .. "\n")
    file:write("-- " .. os.date("%Y-%m-%d %H:%M:%S") .. "\n\n")

    -- Write the data structure
    file:write("PetBattleLevelUpData = {\n")
    file:write("    levelData = {\n")

    -- Sort levels for better readability
    local levels = {}
    for level, _ in pairs(data.levelData) do
        table.insert(levels, tonumber(level))
    end
    table.sort(levels)

    for _, level in ipairs(levels) do
        local levelStr = tostring(level)
        local levelData = data.levelData[levelStr]
        file:write('        ["' .. levelStr .. '"] = {\n')
        file:write('            totalXpNeeded = ' .. levelData.totalXpNeeded .. ',\n')
        file:write('            xpGainPerBattle = ' .. levelData.xpGainPerBattle .. '\n')
        file:write('        },\n')
    end

    file:write("    },\n")
    file:write("    fontSize = " .. (data.fontSize or 2.0) .. ",\n")

    local framePos = data.framePosition or { x = 0, y = 200 }
    file:write("    framePosition = { x = " .. framePos.x .. ", y = " .. framePos.y .. " }\n")

    file:write("}\n")

    file:close()
    print("Successfully generated savedData.lua")
    return true
end

-- Main execution
local function main()
    -- Load the temp data
    local tempData = loadTempData()
    if not tempData then
        return
    end

    print("\nAnalyzing data structure...")

    -- Check if level data exists
    if not tempData.levelData then
        print("ERROR: No levelData found in tempdata.lua")
        return
    end

    -- Prompt for current level since we can't get it from WoW API
    print("\nEnter your current player level (needed for XP-based mapping): ")
    local currentLevel = tonumber(io.read())

    if not currentLevel or currentLevel < 1 or currentLevel > 80 then
        print("ERROR: Invalid level entered")
        return
    end

    print("Using current level: " .. currentLevel)

    -- Check data structure type
    local hasArrayData = false
    local hasProperKeys = false

    for key, value in pairs(tempData.levelData) do
        if type(key) == "number" and type(value) == "table" then
            hasArrayData = true
        elseif type(key) == "string" and tonumber(key) and type(value) == "table" then
            hasProperKeys = true
        end
    end

    print("\nData structure analysis:")
    print("  Has array data (numeric keys): " .. (hasArrayData and "YES" or "NO"))
    print("  Has proper keys (string keys): " .. (hasProperKeys and "YES" or "NO"))

    local correctedData = {}

    if hasArrayData then
        print("\nParsing array-based data using XP sorting...")
        correctedData = parseArrayData(tempData.levelData, currentLevel)

        if next(correctedData) then
            print("Successfully parsed " .. table.getn(correctedData) .. " levels")
        else
            print("Failed to parse array data")
            return
        end
    elseif hasProperKeys then
        print("\nData already has proper structure, copying...")
        correctedData = tempData.levelData
    else
        print("ERROR: No recognizable data structure found")
        return
    end

    -- Create final data structure
    local finalData = {
        levelData = correctedData,
        fontSize = tempData.fontSize or 2.0,
        framePosition = tempData.framePosition or { x = 0, y = 200 }
    }

    -- Generate the output file
    print("\nGenerating savedData.lua...")
    if generateSavedData(finalData, currentLevel) then
        print("\n‚úÖ SUCCESS!")
        print("üìÅ Generated: savedData.lua")
        print("üìã Contains: " .. table.getn(correctedData) .. " level entries")
        print("üéØ Mapped to levels based on XP progression")
        print("\nYou can now copy the content from savedData.lua to your WoW SavedVariables")
    else
        print("\n‚ùå FAILED to generate savedData.lua")
    end
end

-- Helper function to get table length (Lua 5.1 compatibility)
function table.getn(t)
    local count = 0
    for _ in pairs(t) do
        count = count + 1
    end
    return count
end

-- Run the main function
main()