# Pet Battle Level Up Monitor - Data Parser (PowerShell)
# Parses tempdata.lua and generates corrected savedData.lua

Write-Host "Pet Battle Level Up Monitor - Data Parser" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Green
Write-Host ""

# Check if tempdata.lua exists
if (-not (Test-Path "tempdata.lua")) {
    Write-Host "ERROR: tempdata.lua not found in current directory" -ForegroundColor Red
    Write-Host "Please copy your tempdata.lua file to this folder first" -ForegroundColor Yellow
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host "‚úÖ Found tempdata.lua" -ForegroundColor Green

# Read and parse tempdata.lua
try {
    $tempDataContent = Get-Content "tempdata.lua" -Raw
    Write-Host "‚úÖ Successfully loaded tempdata.lua" -ForegroundColor Green

    # Extract level data using regex
    $levelDataMatch = [regex]::Match($tempDataContent, '\["levelData"\]\s*=\s*\{(.*?)\}(?=\s*,|\s*\})', [System.Text.RegularExpressions.RegexOptions]::Singleline)

    if (-not $levelDataMatch.Success) {
        Write-Host "ERROR: Could not find levelData in tempdata.lua" -ForegroundColor Red
        Read-Host "Press Enter to exit"
        exit 1
    }

    # Parse array entries
    $levelDataContent = $levelDataMatch.Groups[1].Value
    $arrayEntries = @()

    # Find all array entries with pattern: \{["']totalXpNeeded["']\s*=\s*(\d+),\s*["']xpGainPerBattle["']\s*=\s*(\d+)
    $entryMatches = [regex]::Matches($levelDataContent, '\{\s*\["?totalXpNeeded"?\]\s*=\s*(\d+),\s*\["?xpGainPerBattle"?\]\s*=\s*(\d+)')

    $index = 1
    foreach ($match in $entryMatches) {
        $totalXp = [int]$match.Groups[1].Value
        $xpGain = [int]$match.Groups[2].Value

        $arrayEntries += @{
            Index = $index
            TotalXpNeeded = $totalXp
            XpGainPerBattle = $xpGain
        }
        $index++
    }

    if ($arrayEntries.Count -eq 0) {
        Write-Host "ERROR: No valid data entries found in tempdata.lua" -ForegroundColor Red
        Read-Host "Press Enter to exit"
        exit 1
    }

    Write-Host "‚úÖ Found $($arrayEntries.Count) data entries" -ForegroundColor Green

    # Get current level from user
    do {
        $currentLevel = Read-Host "Enter your current player level (1-80)"
        $currentLevel = [int]$currentLevel
    } while ($currentLevel -lt 1 -or $currentLevel -gt 80)

    Write-Host "Using current level: $currentLevel" -ForegroundColor Cyan

    # Sort by XP gain (ascending)
    $sortedEntries = $arrayEntries | Sort-Object XpGainPerBattle

    Write-Host ""
    Write-Host "Sorted data by XP values:" -ForegroundColor Yellow
    for ($i = 0; $i -lt $sortedEntries.Count; $i++) {
        $entry = $sortedEntries[$i]
        Write-Host "  $($i+1): XP=$($entry.XpGainPerBattle), Total=$($entry.TotalXpNeeded)" -ForegroundColor White
    }

    # Map to correct levels (highest XP = current level)
    $correctedData = @{}

    Write-Host ""
    Write-Host "Mapping to levels:" -ForegroundColor Yellow

    for ($i = $sortedEntries.Count - 1; $i -ge 0; $i--) {
        $entry = $sortedEntries[$i]
        $assignedLevel = $currentLevel - ($sortedEntries.Count - 1 - $i)

        if ($assignedLevel -gt 0 -and $assignedLevel -le 80) {
            $correctedData[$assignedLevel.ToString()] = @{
                totalXpNeeded = $entry.TotalXpNeeded
                xpGainPerBattle = $entry.XpGainPerBattle
            }

            Write-Host "  Level $assignedLevel : XP=$($entry.XpGainPerBattle), Total=$($entry.TotalXpNeeded)" -ForegroundColor Green
        }
    }

    # Generate savedData.lua
    Write-Host ""
    Write-Host "Generating savedData.lua..." -ForegroundColor Cyan

    $output = @"
-- Pet Battle Level Up Monitor - Corrected Saved Data
-- Generated by parse_data.ps1
-- Current Level: $currentLevel
-- $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

PetBattleLevelUpData = {
    levelData = {
"@

    # Sort levels for output
    $sortedLevels = $correctedData.Keys | Sort-Object {[int]$_}

    foreach ($level in $sortedLevels) {
        $data = $correctedData[$level]
        $output += @"

        ["$level"] = {
            totalXpNeeded = $($data.totalXpNeeded),
            xpGainPerBattle = $($data.xpGainPerBattle)
        },
"@
    }

    $output += @"

    },
    fontSize = 2.0,
    framePosition = { x = 0, y = 200 }
}
"@

    $output | Out-File -FilePath "savedData.lua" -Encoding UTF8

    Write-Host ""
    Write-Host "‚úÖ SUCCESS!" -ForegroundColor Green
    Write-Host "üìÅ Generated: savedData.lua" -ForegroundColor Cyan
    Write-Host "üìã Contains: $($correctedData.Count) level entries" -ForegroundColor Cyan
    Write-Host "üéØ Mapped levels $($currentLevel - $sortedEntries.Count + 1) through $currentLevel" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "You can now copy the content from savedData.lua to your WoW SavedVariables" -ForegroundColor Yellow

} catch {
    Write-Host "ERROR: Failed to parse data - $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Read-Host "Press Enter to exit"